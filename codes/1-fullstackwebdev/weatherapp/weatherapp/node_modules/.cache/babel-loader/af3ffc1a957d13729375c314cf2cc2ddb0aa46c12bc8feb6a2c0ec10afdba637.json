{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { getWeatherIconLg } from './getWeatherIconLg';\nimport { useEffect, useState } from 'react';\nexport const getTempToday = props => {\n  _s();\n  const {\n    latitude,\n    longitude\n  } = props;\n  const apiKey = '31f0270f73eec09e278e668dbaabb991';\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&lang=zh_cn&units=metric`;\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(url);\n      const data = response.data;\n\n      // 更新状态或处理数据\n      setTemp(data.main.temp);\n      setTempMin(data.main.temp_min);\n      setTempMax(data.main.temp_max);\n      setHumidity(data.main.humidity);\n      setWeather(data.weather[0].main);\n      setWeatherDescription(data.weather[0].description);\n      setWeatherIcon(data.weather[0].icon);\n      setWindSpeed(data.wind.speed);\n      setTempFeelsLike(data.main.feels_like);\n      setSunSet(data.sys.sunset);\n      setSunRise(data.sys.sunrise);\n    };\n    fetchData();\n  }, []);\n  const [temp, temp_min, temp_max, humidity, weather, weather_description, weather_icon, wind_speed, temp_feels_like, sun_set, sun_rise] = [temp, temp_min, temp_max, humidity, weather, weather_description, weather_icon, wind_speed, temp_feels_like, sun_set, sun_rise];\n  // console.log(temp, temp_min, temp_max, humidity, weather, weather_description, weather_icon, wind_speed, temp_feels_like);\n  // console.log(data);\n  const weatherIconLg = getWeatherIconLg(weather);\n  const getDate = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const formattedDate = date.toISOString().split('T')[0];\n    return formattedDate;\n  };\n  const getTime = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const formattedTime = date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    return formattedTime;\n  };\n  return {\n    'date': getDate(data.dt),\n    'city': data.name,\n    'temp': temp,\n    'minTemp': temp_min,\n    'maxTemp': temp_max,\n    'weather': weather,\n    'weather_description': weather_description,\n    'weather_icon': weather_icon,\n    'weatherIconLg': weatherIconLg,\n    'water': humidity,\n    'wind': wind_speed,\n    'temp_feels_like': temp_feels_like,\n    'sun_set': getTime(sun_set),\n    'sun_rise': getTime(sun_rise)\n  };\n};\n\n// \"today\": {\n//     \"date\": \"2024-03-20\",\n//     \"city\": \"Melbourne\",\n//     \"weather\": \"Cloudy\",\n//     \"water\": 85,\n//     \"wind\": 9,\n//     \"sun\": 75,\n//     \"minTemp\": 10,\n//     \"maxTemp\": 20\n// },\n_s(getTempToday, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["axios","getWeatherIconLg","useEffect","useState","getTempToday","props","_s","latitude","longitude","apiKey","url","fetchData","response","get","data","setTemp","main","temp","setTempMin","temp_min","setTempMax","temp_max","setHumidity","humidity","setWeather","weather","setWeatherDescription","description","setWeatherIcon","icon","setWindSpeed","wind","speed","setTempFeelsLike","feels_like","setSunSet","sys","sunset","setSunRise","sunrise","weather_description","weather_icon","wind_speed","temp_feels_like","sun_set","sun_rise","weatherIconLg","getDate","timestamp","date","Date","formattedDate","toISOString","split","getTime","formattedTime","toLocaleTimeString","hour","minute","dt","name"],"sources":["/Users/chrisdavis/Desktop/coding/web-learning/codes/1-fullstackwebdev/weatherapp/weatherapp/src/utils/getTempToday.jsx"],"sourcesContent":["import axios from 'axios';\nimport { getWeatherIconLg } from './getWeatherIconLg';\nimport { useEffect, useState } from 'react';\nexport const getTempToday = (props) => {\n    const { latitude, longitude } = props;\n    const apiKey = '31f0270f73eec09e278e668dbaabb991';\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&lang=zh_cn&units=metric`;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await axios.get(url);\n            const data = response.data;\n\n            // 更新状态或处理数据\n            setTemp(data.main.temp);\n            setTempMin(data.main.temp_min);\n            setTempMax(data.main.temp_max);\n            setHumidity(data.main.humidity);\n            setWeather(data.weather[0].main);\n            setWeatherDescription(data.weather[0].description);\n            setWeatherIcon(data.weather[0].icon);\n            setWindSpeed(data.wind.speed);\n            setTempFeelsLike(data.main.feels_like);\n            setSunSet(data.sys.sunset);\n            setSunRise(data.sys.sunrise);\n        }\n        fetchData();\n    }, []);\n\n    const [\n        temp,\n        temp_min,\n        temp_max,\n        humidity,\n        weather,\n        weather_description,\n        weather_icon,\n        wind_speed,\n        temp_feels_like,\n        sun_set,\n        sun_rise\n    ] = [\n            temp,\n            temp_min,\n            temp_max,\n            humidity,\n            weather,\n            weather_description,\n            weather_icon,\n            wind_speed,\n            temp_feels_like,\n            sun_set,\n            sun_rise\n        ];\n    // console.log(temp, temp_min, temp_max, humidity, weather, weather_description, weather_icon, wind_speed, temp_feels_like);\n    // console.log(data);\n    const weatherIconLg = getWeatherIconLg(weather);\n\n    const getDate = (timestamp) => {\n        const date = new Date(timestamp * 1000);\n        const formattedDate = date.toISOString().split('T')[0];\n        return formattedDate;\n    }\n\n    const getTime = (timestamp) => {\n        const date = new Date(timestamp * 1000);\n        const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n        return formattedTime;\n    }\n\n    return {\n        'date': getDate(data.dt),\n        'city': data.name,\n        'temp': temp,\n        'minTemp': temp_min,\n        'maxTemp': temp_max,\n        'weather': weather,\n        'weather_description': weather_description,\n        'weather_icon': weather_icon,\n        'weatherIconLg': weatherIconLg,\n        'water': humidity,\n        'wind': wind_speed,\n        'temp_feels_like': temp_feels_like,\n        'sun_set': getTime(sun_set),\n        'sun_rise': getTime(sun_rise)\n    };\n};\n\n// \"today\": {\n//     \"date\": \"2024-03-20\",\n//     \"city\": \"Melbourne\",\n//     \"weather\": \"Cloudy\",\n//     \"water\": 85,\n//     \"wind\": 9,\n//     \"sun\": 75,\n//     \"minTemp\": 10,\n//     \"maxTemp\": 20\n// },"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}