{"ast":null,"code":"import axios from 'axios';\nimport { getWeatherIconLg } from './getWeatherIconLg';\nexport const getTempToday = async props => {\n  const {\n    latitude,\n    longitude\n  } = props;\n  const apiKey = '31f0270f73eec09e278e668dbaabb991';\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&lang=zh_cn&units=metric`;\n  const response = await axios.get(url);\n  const data = response.data;\n  const [temp, temp_min, temp_max, humidity, weather, weather_description, weather_icon, wind_speed, temp_feels_like] = [data.main.temp, data.main.temp_min, data.main.temp_max, data.main.humidity, data.weather[0].main, data.weather[0].description, data.weather[0].icon, data.wind.speed, data.main.feels_like];\n  // console.log(temp, temp_min, temp_max, humidity, weather, weather_description, weather_icon, wind_speed, temp_feels_like);\n  // console.log(data);\n  const weatherIconLg = getWeatherIconLg(weather);\n  const getDate = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const formattedDate = date.toISOString().split('T')[0];\n    return formattedDate;\n  };\n  return {\n    'date': getDate(data.dt),\n    'city': data.name,\n    'temp': temp,\n    'minTemp': temp_min,\n    'maxTemp': temp_max,\n    'weather': weather,\n    'weather_description': weather_description,\n    'weather_icon': weather_icon,\n    'weatherIconLg': weatherIconLg,\n    'water': humidity,\n    'wind': wind_speed,\n    'temp_feels_like': temp_feels_like\n  };\n};\n\n// \"today\": {\n//     \"date\": \"2024-03-20\",\n//     \"city\": \"Melbourne\",\n//     \"weather\": \"Cloudy\",\n//     \"water\": 85,\n//     \"wind\": 9,\n//     \"sun\": 75,\n//     \"minTemp\": 10,\n//     \"maxTemp\": 20\n// },","map":{"version":3,"names":["axios","getWeatherIconLg","getTempToday","props","latitude","longitude","apiKey","url","response","get","data","temp","temp_min","temp_max","humidity","weather","weather_description","weather_icon","wind_speed","temp_feels_like","main","description","icon","wind","speed","feels_like","weatherIconLg","getDate","timestamp","date","Date","formattedDate","toISOString","split","dt","name"],"sources":["/Users/chrisdavis/Desktop/coding/web-learning/codes/1-fullstackwebdev/weatherapp/weatherapp/src/utils/getTempToday.jsx"],"sourcesContent":["import axios from 'axios';\nimport { getWeatherIconLg } from './getWeatherIconLg';\n\nexport const getTempToday = async (props) => {\n    const { latitude, longitude } = props;\n    const apiKey = '31f0270f73eec09e278e668dbaabb991';\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&lang=zh_cn&units=metric`;\n\n    const response = await axios.get(url);\n    const data = response.data;\n\n    const [\n        temp,\n        temp_min,\n        temp_max,\n        humidity,\n        weather,\n        weather_description,\n        weather_icon,\n        wind_speed,\n        temp_feels_like\n    ] = [\n            data.main.temp,\n            data.main.temp_min,\n            data.main.temp_max,\n            data.main.humidity,\n            data.weather[0].main,\n            data.weather[0].description,\n            data.weather[0].icon,\n            data.wind.speed,\n            data.main.feels_like\n        ];\n    // console.log(temp, temp_min, temp_max, humidity, weather, weather_description, weather_icon, wind_speed, temp_feels_like);\n    // console.log(data);\n    const weatherIconLg = getWeatherIconLg(weather);\n\n    const getDate = (timestamp) => {\n        const date = new Date(timestamp * 1000);\n        const formattedDate = date.toISOString().split('T')[0];\n        return formattedDate;\n    }\n\n    return {\n        'date': getDate(data.dt),\n        'city': data.name,\n        'temp': temp,\n        'minTemp': temp_min,\n        'maxTemp': temp_max,\n        'weather': weather,\n        'weather_description': weather_description,\n        'weather_icon': weather_icon,\n        'weatherIconLg': weatherIconLg,\n        'water': humidity,\n        'wind': wind_speed,\n        'temp_feels_like': temp_feels_like\n    };\n};\n\n// \"today\": {\n//     \"date\": \"2024-03-20\",\n//     \"city\": \"Melbourne\",\n//     \"weather\": \"Cloudy\",\n//     \"water\": 85,\n//     \"wind\": 9,\n//     \"sun\": 75,\n//     \"minTemp\": 10,\n//     \"maxTemp\": 20\n// },"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EACzC,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGF,KAAK;EACrC,MAAMG,MAAM,GAAG,kCAAkC;EACjD,MAAMC,GAAG,GAAG,uDAAuDH,QAAQ,QAAQC,SAAS,UAAUC,MAAM,0BAA0B;EAEtI,MAAME,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACF,GAAG,CAAC;EACrC,MAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;EAE1B,MAAM,CACFC,IAAI,EACJC,QAAQ,EACRC,QAAQ,EACRC,QAAQ,EACRC,OAAO,EACPC,mBAAmB,EACnBC,YAAY,EACZC,UAAU,EACVC,eAAe,CAClB,GAAG,CACIT,IAAI,CAACU,IAAI,CAACT,IAAI,EACdD,IAAI,CAACU,IAAI,CAACR,QAAQ,EAClBF,IAAI,CAACU,IAAI,CAACP,QAAQ,EAClBH,IAAI,CAACU,IAAI,CAACN,QAAQ,EAClBJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAACK,IAAI,EACpBV,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAACM,WAAW,EAC3BX,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAACO,IAAI,EACpBZ,IAAI,CAACa,IAAI,CAACC,KAAK,EACfd,IAAI,CAACU,IAAI,CAACK,UAAU,CACvB;EACL;EACA;EACA,MAAMC,aAAa,GAAGzB,gBAAgB,CAACc,OAAO,CAAC;EAE/C,MAAMY,OAAO,GAAIC,SAAS,IAAK;IAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,GAAG,IAAI,CAAC;IACvC,MAAMG,aAAa,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtD,OAAOF,aAAa;EACxB,CAAC;EAED,OAAO;IACH,MAAM,EAAEJ,OAAO,CAACjB,IAAI,CAACwB,EAAE,CAAC;IACxB,MAAM,EAAExB,IAAI,CAACyB,IAAI;IACjB,MAAM,EAAExB,IAAI;IACZ,SAAS,EAAEC,QAAQ;IACnB,SAAS,EAAEC,QAAQ;IACnB,SAAS,EAAEE,OAAO;IAClB,qBAAqB,EAAEC,mBAAmB;IAC1C,cAAc,EAAEC,YAAY;IAC5B,eAAe,EAAES,aAAa;IAC9B,OAAO,EAAEZ,QAAQ;IACjB,MAAM,EAAEI,UAAU;IAClB,iBAAiB,EAAEC;EACvB,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}